package com.deya.wcm.dao.interview;import java.util.HashMap;import java.util.List;import java.util.Map;import com.deya.wcm.bean.interview.SubReleInfo;import com.deya.wcm.bean.logs.SettingLogsBean;import com.deya.wcm.dao.PublicTableDAO;import com.deya.wcm.db.DBManager;/** * 访谈相关信息数据处理类. * <p>Title: CicroDate</p> * <p>Description: 访谈相关信息的数据处理</p> * <p>Copyright: Copyright (c) 2010</p> * <p>Company: Cicro</p> * @author zhuliang * @version 1.0 * *  */public class SubReleInfoDAO {		/**     * 得到相关信息列表总数     * @param Map m　组织好的查询，翻页条数等参数     * @return List　列表     * */	public static String getReleInfoListCountBySub_id(Map<String,String> m)	{				return DBManager.getString("getReleInfoListCountBySub_id", m);	}		public static String getReleInfoCountBySub_id(String sub_id)	{			return DBManager.getString("getReleInfoCountBySub_id",sub_id);	}		/**     * 得到相关信息对象     * @param int id 参与者对象id     * @return List　列表     * */	public static SubReleInfo getSubReleInfo(int id)	{		SubReleInfo sri = (SubReleInfo)DBManager.queryFObj("getReleInfo", id);		return sri;	}    /**     * 得到相关信息列表     * @param Map m　组织好的查询，翻页条数等参数     * @return List　列表     * */    @SuppressWarnings("unchecked")    public static List getReleInfoListBySub_id(Map m)    {        List l = DBManager.queryFList("getReleInfoListBySub_id", m);        return l;    }		/**     * 得到相关信息对象     * @param String id 参与者对象uuid     * @return List　列表     * */	public static SubReleInfo getSubReleInfo(String id)	{		SubReleInfo sri = (SubReleInfo)DBManager.queryFObj("getReleInfoByUUID", id);		return sri;	}		/**     * 添加相关信息     * @param SubjectActor sa 相关信息对象     * @return List　列表     * */	public static boolean insertReleInfo(SubReleInfo sri,SettingLogsBean stl)	{		int id = PublicTableDAO.getIDByTableName(PublicTableDAO.INTERVIEW_RELEINFO_TABLE_NAME);		sri.setId(id);		if(DBManager.insert("cp_releinfo_insert", sri))		{			PublicTableDAO.insertSettingLogs("添加","访谈相关信息",id+"",stl);			return true;		}		else			return false;	}		/**     * 修改相关信息     * @param SubReleInfo sr 相关信息对象     * @return List　列表     * */	public static boolean updateReleInfo(SubReleInfo sri,SettingLogsBean stl)	{		if(DBManager.insert("cp_releinfo_update", sri))		{			PublicTableDAO.insertSettingLogs("修改","访谈相关信息",sri.getId()+"",stl);			return true;		}		else			return false;	}		/**     * 删除相关信息     * @param Map m     * @return List　列表     * */	@SuppressWarnings("unchecked")	public static boolean deleteReleInfo(Map m,SettingLogsBean stl)	{		if(DBManager.update("cp_releinfo_delete", m))		{			PublicTableDAO.insertSettingLogs("删除","访谈相关信息",m.get("ids")+"",stl);			return true;		}		else			return false;			}		/**     * 发布相关信息     * @param Map m     * @return List　列表     * */	@SuppressWarnings("unchecked")	public static boolean publishReleInfo(Map m,SettingLogsBean stl)	{		if(DBManager.update("cp_releinfo_updateStatus", m))		{			PublicTableDAO.insertSettingLogs("发布","访谈相关信息",m.get("ids")+"",stl);			return true;		}		else			return false;			}		/**     * 保存相关信息排序     * @param Map m     * @return List　列表     * */	@SuppressWarnings("unchecked")	public static boolean saveReleInfoSort(Map m,SettingLogsBean stl)	{		String ids = (String)m.get("ids");		if(ids != null && !"".equals(ids))		{			Map<String,String> new_m = new HashMap<String,String>();			String[] tempA = ids.split(",");			try{				for(int i=0;i<tempA.length;i++)				{					new_m.put("sort", (i+1)+"");					new_m.put("id", tempA[i]);					DBManager.update("cp_releinfo_sort", new_m);				}			}catch(Exception e)			{				e.printStackTrace();				return false;							}			PublicTableDAO.insertSettingLogs("保存排序","访谈相关信息",ids,stl);		}		return true;	}}